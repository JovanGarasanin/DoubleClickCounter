----------------------------------------------------------------------------------------------------
-- Project      : Doubleclick counter + SPI
-- Description  : Doubleclick counter with an SPI for data serialization and transfer
-- Authors      : Djordje Hadzic, Jovan Garasanin
-- File         : ProjectDC.vhd
-- File descrip.: This file contains an entity which sets the output registers according to the 
--                Counter.vhd output.
----------------------------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity Converter is 
   port( 
    --Input signals
    Input8bit	: out std_logic_vector(7 downto 0);
    Clock	: in std_logic;
    Reset	: in std_logic;
    
    --Output signals
    Output	: out std_logic_vector(3 downto 0);
	 Carry 	: out std_logic
    );
end Converter;

architecture Behavioral of Converter is

    signal cnt_ones			: std_logic_vector(3 downto 0) := "0000";
    signal cnt_tens			: std_logic_vector(3 downto 0) := "0000";
    signal buff_reg			: std_logic_vector(15 downto 0);   -- Register being 
																												-- sent to the 
																												-- SPI to be 
																												-- serialized
																			
  type mem_array is array (7 downto 0) of std_logic_vector(3 downto 0);  -- when used as
																									-- 2x 8 4-bit vectors; 
																									-- bits 7-3 used for tens, 
																									-- 4-0 used for ones; 
																									-- Row 7 is the top ones
																									-- Row 0 bottom
																									-- used only 7-3
	
   
    signal reg_ones, reg_tens : mem_array := (
        others => x"0"
    );
    
    
    my_proc: process (cnt_ones, cnt_tens)
		begin
		
		  -- Case for determining ON and OFF diodes based on what ones digit the counter displays
    case (cnt_ones) is
        when "0000" => -- When The Digit Is '0'
            reg_ones (7) <= x"E";  
				reg_ones (6) <= x"A"; 
				reg_ones (5) <= x"A"; 
				reg_ones (4) <= x"A";
				reg_ones (3) <= x"E";
            
        
        when "0001" => -- WTDI '1'
            reg_ones (7) <= x"2";  
				reg_ones (6) <= x"2"; 
				reg_ones (5) <= x"2"; 
				reg_ones (4) <= x"2";
				reg_ones (3) <= x"2";
        
        when "0010" => -- WTDI '2'
            reg_ones (7) <= x"E";
				reg_ones (6) <= x"2";
            reg_ones (5) <= x"E";
				reg_ones (4) <= x"8";
            reg_ones (3) <= x"E";
            
           
        
        when "0011" => -- WTDI '3'
            reg_ones (7) <= x"E";
				reg_ones (6) <= x"2";
				reg_ones (5) <= x"E";
				reg_ones (4) <= x"2";
            reg_ones (3) <= x"E";
            
            
        when "0100" => -- WTDI '4'
            reg_ones (7) <= x"A";
				reg_ones (6) <= x"A";
            reg_ones (5) <= x"E";
            reg_ones (4) <= x"2";
				reg_ones (3) <= x"2";
            
        when "0101" => -- WTDI '5'
            reg_ones (7) <= x"E";
				reg_ones (6) <= x"8";
				reg_ones (5) <= x"E";
				reg_ones (4) <= x"2";
				reg_ones (3) <= x"E";
            
            
        
        when "0110" => -- WTDI '6'
            reg_ones (7) <= x"E";
            reg_ones (6) <= x"8";
				reg_ones (5) <= x"E";
            reg_ones (4) <= x"A";
				reg_ones (3) <= x"E";
            
        when "0111" => -- WTDI '7'
            reg_ones (7) <= x"E";
            reg_ones (6) <= x"2";
            reg_ones (5) <= x"2";
            reg_ones (4) <= x"2";
            reg_ones (3) <= x"2";
            
        when "1000" => -- WTDI '8'
            reg_ones (7) <= x"E";
				reg_ones (6) <= x"A";
				reg_ones (5) <= x"E";
				reg_ones (4) <= x"A";
				reg_ones (3) <= x"E";
            
				
            
            
        when "1001" => -- WTDI '9'
            reg_ones (7) <= x"E";
            reg_ones (6) <= x"A";
				reg_ones (5) <= x"E";
            reg_ones (4) <= x"1";
				reg_ones (3) <= x"E";
            
        when others => -- When others 
            reg_ones (7) <= x"E";
            reg_ones (6) <= x"8";
				reg_ones (5) <= x"E";
				reg_ones (4) <= x"8";
				reg_ones (3) <= x"E";
            
    end case;
 
      
    
    -- Case for determining ON and OFF diodes based on what tens digit the counter displays
    case (cnt_tens) is
       when "0000" => -- When The Digit Is '0'
            reg_tens (7) <= x"E";  
				reg_tens (6) <= x"A"; 
				reg_tens (5) <= x"A"; 
				reg_tens (4) <= x"A";
				reg_tens (3) <= x"E";
            
        
        when "0001" => -- WTDI '1'
            reg_tens (7) <= x"2";  
				reg_tens (6) <= x"2"; 
				reg_tens (5) <= x"2"; 
				reg_tens (4) <= x"2";
				reg_tens (3) <= x"2";
        
        when "0010" => -- WTDI '2'
            reg_tens (7) <= x"E";
				reg_tens (6) <= x"2";
            reg_tens (5) <= x"E";
				reg_tens (4) <= x"8";
            reg_tens (3) <= x"E";
            
           
        
        when "0011" => -- WTDI '3'
            reg_tens (7) <= x"E";
				reg_tens (6) <= x"2";
				reg_tens (5) <= x"E";
				reg_tens (4) <= x"2";
            reg_tens (3) <= x"E";
            
            
        when "0100" => -- WTDI '4'
            reg_tens (7) <= x"A";
				reg_tens (6) <= x"A";
            reg_tens (5) <= x"E";
            reg_tens (4) <= x"2";
				reg_tens (3) <= x"2";
            
        when "0101" => -- WTDI '5'
            reg_tens (7) <= x"E";
				reg_tens (6) <= x"8";
				reg_tens (5) <= x"E";
				reg_tens (4) <= x"2";
				reg_tens (3) <= x"E";
            
            
        
        when "0110" => -- WTDI '6'
            reg_tens (7) <= x"E";
            reg_tens (6) <= x"8";
				reg_tens (5) <= x"E";
            reg_tens (4) <= x"A";
				reg_tens (3) <= x"E";
            
        when "0111" => -- WTDI '7'
            reg_tens (7) <= x"E";
            reg_tens (6) <= x"2";
            reg_tens (5) <= x"2";
            reg_tens (4) <= x"2";
            reg_tens (3) <= x"2";
            
        when "1000" => -- WTDI '8'
            reg_tens (7) <= x"E";
				reg_tens (6) <= x"A";
				reg_tens (5) <= x"E";
				reg_tens (4) <= x"A";
				reg_tens (3) <= x"E";
            
				
            
            
        when "1001" => -- WTDI '9'
            reg_tens (7) <= x"E";
            reg_tens (6) <= x"A";
				reg_tens (5) <= x"E";
            reg_tens (4) <= x"1";
				reg_tens (3) <= x"E";
            
        when others => -- When others 
            reg_tens (7) <= x"E";
            reg_tens (6) <= x"8";
				reg_tens (5) <= x"E";
				reg_tens (4) <= x"8";
				reg_tens (3) <= x"E";
            
    end case;
    end process;
    
end Behavioral;
    
    