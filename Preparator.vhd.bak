----------------------------------------------------------------------------------------------------
-- Project      : Doubleclick counter + SPI
-- Description  : Doubleclick counter with an SPI for data serialization and transfer
-- Authors      : Djordje Hadzic, Jovan Garasanin
-- File         : Preparator.vhd
-- File descrip.: This file contains an entity which regulates which row of bits is set to the SPI 
--                to be serialized. It operates similarly to the SPI itself.
----------------------------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity Preparator is 
   port( 
    --Input signals
    InputInfo		: in std_logic_vector(31 downto 0);
    i_Clk			: in std_logic;
    i_Reset			: in std_logic;
    
    --Output signals
    Output30bit	: out std_logic_vector(15 downto 0)
    );
end Converter;

architecture Behaviour of Preparator is

	type state_type is (s7, s6, s5, s4, s3); --states of the FSM
   signal state_reg, next_state : state_type;



begin

 state_transition: process (i_Reset, i_Clk) is
    begin
        if (i_Reset = '1') then
            state_reg <= s3;
        elsif (rising_edge(i_Clk)) then --ako ne radi probaj: (Clock'event and Clock = '1')
            state_reg <= next_state;
        end if;
    end process;
        
    next_state_logic: process (state_reg) is --ili ovde
    begin
        case (state_reg) is               
            when s3 =>
                if (tr_end = '1') then 
                    next_state <= s7;
                else
                    next_state <= state_reg;

                end if;
            
            when s4 =>
                if (tr_end = '1') then 
                    next_state <= s3;

                else
                    next_state <= state_reg;

                end if;
            
            when s5 =>
                if (tr_end = '1') then 
                    next_state <= s4;

                else
                    next_state <= state_reg;

                end if;
            
            when s6 =>
                if (tr_end = '1') then 
                    next_state <= s5;

                else
                    next_state <= state_reg;

                end if;
            
            when s7 =>
                if (tr_end = '1') then 
                    next_state <= s6;

                else
                    next_state <= state_reg;

                end if;
        end case;    
    end process;

    output_logic: process (state_reg) is
    begin
        case (state_reg) is
            when s7 =>
                buff_reg(7 downto 4) <= reg_tens(7);
                buff_reg(3 downto 0) <= reg_ones(7);
					 buff_reg(11 downto 8) <= "0001";
					 
					 
            
            when s6 =>
                buff_reg(7 downto 4) <= reg_tens(6);
                buff_reg(3 downto 0) <= reg_ones(6);
					 buff_reg(11 downto 8) <= "0010";
            
            when s5 =>
                buff_reg(7 downto 4) <= reg_tens(5);
                buff_reg(3 downto 0) <= reg_ones(5);
					 buff_reg(11 downto 8) <= "0011";
            
            when s4 =>
                buff_reg(7 downto 4) <= reg_tens(4);
                buff_reg(3 downto 0) <= reg_ones(4);
					 buff_reg(11 downto 8) <= "0100";
            
            when s3 =>
                buff_reg(7 downto 4) <= reg_tens(3);
                buff_reg(3 downto 0) <= reg_ones(3);
					 buff_reg(11 downto 8) <= "0101";
            
        end case;
    end process;
    
end Behaviour;